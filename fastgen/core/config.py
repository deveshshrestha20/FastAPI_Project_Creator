import getpass
from pathlib import Path
from urllib.parse import quote_plus

# ------------------------------
# Project Directories
# ------------------------------
PROJECT_ROOT = Path(__file__).parent.parent
TEMPLATES_DIR = PROJECT_ROOT / "templates"

# ------------------------------
# Features / Options
# ------------------------------
FEATURES = {
    "include_database": {
        "question": "Do you want a database?",
        "options": ["y", "n"],
        "default": "n",
    },
    "include_auth": {
        "question": "Do you want authentication? (y/n)",
        "options": ["y", "n"],
        "default": "n",
    },
    "include_docker": {
        "question": "Do you want Docker support? (y/n)",
        "options": ["y", "n"],
        "default": "n",
    },
    "include_celery": {
        "question": "Do you want Celery for background tasks? (y/n)",
        "options": ["y", "n"],
        "default": "n",
    },
    "async_mode": {
        "question": "Do you want async or sync code?",
        "options": ["async", "sync"],
        "default": "async",
    },
    "include_loguru": {
        "question": "Do you want loguru configuration? (y/n)",
        "options": ["y", "n"],
        "default": "y",
    }
}

# ------------------------------
# PostgreSQL Configuration
# ------------------------------
POSTGRESQL_CONFIG = {
    "dependencies": ["sqlalchemy", "asyncpg", "psycopg2-binary"],
    "async_url_template": "postgresql+asyncpg://{user}:{password}@{host}:{port}/{database}",
    "sync_url_template": "postgresql://{user}:{password}@{host}:{port}/{database}",
    "default_port": "5432"
}

# ------------------------------
# Collect PostgreSQL Config
# ------------------------------
def collect_postgresql_config(project_slug: str, is_async: bool = True) -> dict:
    print("\n" + "="*50)
    print("POSTGRESQL CONFIGURATION")
    print("="*50)

    host = input("Database host (localhost): ").strip() or "localhost"
    port = input(f"Database port (5432): ").strip() or "5432"
    database = input(f"Database name : ").strip() or f"{project_slug}_db"
    user = input("Database username (postgres): ").strip() or "postgres"

    print("\nDatabase Password:")
    print("Note: Password will be saved to .env.local. Keep this file secure!")
    password = getpass.getpass("Database password (hidden input): ")

    if not password:
        use_empty = input("Use empty password? [y/n] (n): ").lower().startswith('y')
        if not use_empty:
            password = getpass.getpass("Please enter a password: ")

    # URL-encode the password to safely handle special characters like @, :, /
    encoded_password = quote_plus(password)

    url_template = POSTGRESQL_CONFIG["async_url_template"] if is_async else POSTGRESQL_CONFIG["sync_url_template"]
    database_url = url_template.format(user=user, password=encoded_password, host=host, port=port, database=database)

    return {
        "database_url": database_url,
        "dependencies": POSTGRESQL_CONFIG["dependencies"],
        "db_host": host,
        "db_port": port,
        "db_name": database,
        "db_user": user
    }

# ------------------------------
# Generate .env.local File
# ------------------------------
def generate_env_file(project_path: Path, db_config: dict, template_vars: dict):
    envs_folder = project_path / "envs"
    envs_folder.mkdir(exist_ok=True)

    env_file = envs_folder / ".env.local"
    env_template = envs_folder / ".env.local.template"

    env_content = f"""# {template_vars['project_name']} Environment Configuration
# Generated by FastGen

# Application Settings
APP_NAME={template_vars['project_name']}
APP_VERSION={template_vars['version']}
ENVIRONMENT=development
DEBUG=true

# Server Settings  
HOST=0.0.0.0
PORT=8000

# PostgreSQL Database Configuration
DATABASE_URL={db_config['database_url']}
"""

    # Write the actual environment file
    with open(env_file, "w") as f:
        f.write(env_content)

    # Write the template with placeholder values
    template_content = env_content.replace(
        db_config['database_url'],
        'postgresql+asyncpg://user:password@localhost:5432/dbname'
    )

    with open(env_template, "w") as f:
        f.write(template_content)

    print(f"Environment files created in 'envs' folder:")
    print(f"   .env.local (with your configuration)")
    print(f"   .env.local.template (for version control)")

# ------------------------------
# Default Dependency Versions
# ------------------------------
DEFAULT_VERSIONS = {
    # Base packages
    "fastapi": "0.104.1",
    "uvicorn": "0.24.0",
    "pydantic": "2.5.0",

    # PostgreSQL packages
    "sqlalchemy": "2.0.23",
    "alembic": "1.12.1",
    "asyncpg": "0.29.0",

    # Authentication packages
    "passlib": "1.7.4",
    "python_jose": "3.3.0",
    "email_validator": "2.1.0",

    # Celery / Redis / Other
    "celery": "5.3.4",
    "redis": "5.0.1",
    "loguru": "0.7.2"
}
