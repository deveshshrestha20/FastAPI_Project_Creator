ARG PYTHON_VERSION=3.11.8

FROM python:${PYTHON_VERSION}-slim-bookworm AS python

# Stage 1: build dependency wheels
FROM python AS python-build-stage

RUN apt-get update && apt-get install \
  --no-install-recommends -y \
  build-essential \
  {% if include_database -%}
  libpq-dev \
  {% endif -%}
  git

COPY ./requirements.txt .

RUN pip wheel --wheel-dir /usr/src/app/wheels \
  -r requirements.txt \
  --no-cache-dir

# Stage 2: Python run stage
FROM python AS python-run-stage

ARG APP_HOME=/app
ARG APP_USER=fastapi
ARG APP_GROUP=fastapi

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=${APP_HOME} \
    C_FORCE_ROOT=1

WORKDIR ${APP_HOME}

RUN apt-get update && apt-get install --no-install-recommends -y \
  curl netcat-openbsd gettext \
  {% if include_database -%}
  libpq-dev \
  {% endif -%}
  && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false \
  && rm -rf /var/lib/apt/lists/*

RUN groupadd -r ${APP_GROUP} && \
  useradd -r -g ${APP_GROUP} -d ${APP_HOME} -m ${APP_USER}

RUN mkdir -p ${APP_HOME}/logs && \
  chown -R ${APP_USER}:${APP_GROUP} ${APP_HOME}/logs && \
  chmod 775 ${APP_HOME}/logs

COPY --from=python-build-stage /usr/src/app/wheels /wheels/

RUN pip install --no-cache-dir --no-index --find-links=/wheels/ /wheels/* \
  && rm -rf /wheels/

COPY --chown=${APP_USER}:${APP_GROUP} ./docker/fastapi/entrypoint.sh /entrypoint.sh
COPY --chown=${APP_USER}:${APP_GROUP} ./docker/fastapi/start.sh /start.sh

RUN sed -i 's/\r$//g' /entrypoint.sh /start.sh && \
  chmod +x /entrypoint.sh /start.sh

COPY --chown=${APP_USER}:${APP_GROUP} . ${APP_HOME}

USER ${APP_USER}

ENTRYPOINT ["/entrypoint.sh"]

CMD ["/start.sh"]