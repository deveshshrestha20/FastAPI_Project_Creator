#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail


python <<END
import sys
import time

MAX_WAIT_SECONDS = 30
RETRY_INTERVAL = 5
start_time = time.time()

{% if is_async %}
import psycopg

def check_database():
    try:
        psycopg.connect(
            dbname="${POSTGRES_DB}",
            user="${POSTGRES_USER}",
            password="${POSTGRES_PASSWORD}",
            host="${POSTGRES_HOST}",
            port="${POSTGRES_PORT}",
        )
        return True
    except psycopg.OperationalError as error:
        elapsed = int(time.time() - start_time)
        sys.stderr.write(f"[SYNC] Connection failed after {elapsed}s: {error}\n")
        return False
{% else %}
import asyncio
import asyncpg

async def check_database():
    try:
        conn = await asyncpg.connect(
            user="${POSTGRES_USER}",
            password="${POSTGRES_PASSWORD}",
            database="${POSTGRES_DB}",
            host="${POSTGRES_HOST}",
            port=int("${POSTGRES_PORT}"),
        )
        await conn.close()
        return True
    except Exception as error:
        elapsed = int(time.time() - start_time)
        sys.stderr.write(f"[ASYNC] Connection failed after {elapsed}s: {error}\n")
        return False

# wrap async function
def check_database_sync():
    return asyncio.run(check_database())
{% endif %}

while True:
    {% if database_sync %}
    if check_database():
        break
    {% else %}
    if check_database_sync():
        break
    {% endif %}

    if time.time() - start_time > MAX_WAIT_SECONDS:
        sys.stderr.write("Database connection could not be established after 30 seconds\n")
        sys.exit(1)

    sys.stderr.write(f"Waiting {RETRY_INTERVAL} seconds before retrying...\n")
    time.sleep(RETRY_INTERVAL)
END

echo >&2 "PostgreSQL is ready to accept connections"

# Run migrations if needed
# alembic upgrade head

# Execute final CMD
exec "$@"
