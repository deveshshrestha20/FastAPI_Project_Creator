"""
Logging configuration for {{ project_name }}
Using loguru for structured logging
"""

import os
from app.core.config import settings
from loguru import logger

# Remove default handler
logger.remove()

# Create logs directory path
LOG_DIR = os.path.join(os.path.dirname(os.path.dirname(__file__)), "logs")

# Ensure logs directory exists
os.makedirs(LOG_DIR, exist_ok=True)

# Log format
LOG_FORMAT = (
    "{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | "
    "{name}:{function}:{line} - {message}"
)

# Debug/Info log - everything up to WARNING level
logger.add(
    sink=os.path.join(LOG_DIR, "debug.log"),
    format=LOG_FORMAT,
    level="DEBUG" if settings.environment == "development" else "INFO",
    filter=lambda record: record['level'].no <= logger.level("WARNING").no,
    rotation="10 MB",
    retention="30 days",
    compression="zip",
    backtrace=True,
    diagnose=True
)

# Error log - only ERROR and above
logger.add(
    sink=os.path.join(LOG_DIR, "error.log"),
    format=LOG_FORMAT,
    level="ERROR",
    rotation="5 MB",
    retention="60 days",
    compression="zip",
    backtrace=True,
    diagnose=True
)

{% if include_database %}
# Database operations log
logger.add(
    sink=os.path.join(LOG_DIR, "database.log"),
    format=LOG_FORMAT,
    level="INFO",
    filter=lambda record: "database" in record["extra"],
    rotation="10 MB",
    retention="14 days",
    compression="zip",
    backtrace=True,
    diagnose=True
)
{% endif %}

{% if include_auth %}
# Authentication/Security log
logger.add(
    sink=os.path.join(LOG_DIR, "auth.log"),
    format=LOG_FORMAT,
    level="INFO",
    filter=lambda record: "auth" in record["extra"],
    rotation="5 MB",
    retention="90 days",  # Keep auth logs longer for security
    compression="zip",
    backtrace=True,
    diagnose=True
)
{% endif %}

def get_logger():
    """Get the configured logger instance"""
    return logger